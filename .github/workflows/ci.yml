name: CI

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "*" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    # Change to warp-ubuntu-latest-x64-16x for a more powerful runner
    runs-on: ubuntu-latest
    steps:
      - name: Set up git private repo access
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com/".insteadOf ssh://git@github.com
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com".insteadOf https://github.com
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Linux Tests
        run: |
          cargo nextest run --profile ci --workspace
      - name: Linux Tests with the parallel feeature
        run: |
          cargo nextest run --profile ci --workspace --features parallel

  clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up git private repo access
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com/".insteadOf ssh://git@github.com
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com".insteadOf https://github.com
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check Rustfmt Code Style
        run: cargo fmt --all --check
      - name: check *everything* compiles
        run: cargo check --all-targets --all-features --workspace --examples --tests --benches
      # See '.cargo/config' for list of enabled/disabled clippy lints
      - name: Check clippy warnings
        run: cargo xclippy -D warnings
      - name: Doctests
        run: cargo test --doc --workspace

  check-downstream-compiles:
    runs-on: warp-ubuntu-latest-x64-16x
    if: ${{ github.base_ref == 'sp1-new' }}
    steps:
      - name: Set up git private repo access
        run: |
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com/".insteadOf ssh://git@github.com
          git config --global url."https://${{ secrets.REPO_TOKEN }}@github.com".insteadOf https://github.com
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
          path: ci-workflows
          ref: downstream-transitive
      - uses: ./ci-workflows/.github/actions/ci-env
      # Check that lurk-lab/sphinx compiles
      - name: Set env
        run: |
          echo "UPSTREAM_REPO=$(echo "lurk-lab/Plonky3" | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
          echo "DOWNSTREAM_REPO=$(echo "lurk-lab/sphinx" | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
          echo "DOWNSTREAM_REPO_2=$(echo "lurk-lab/zk-light-clients" | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/${{ env.UPSTREAM_REPO }}
      - uses: actions/checkout@v4
        with:
          repository: "lurk-lab/${{ env.DOWNSTREAM_REPO }}"
          path: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
          token: ${{ secrets.REPO_TOKEN }}
      - uses: actions/checkout@v4
        with:
          repository: "lurk-lab/${{ env.DOWNSTREAM_REPO_2 }}"
          path: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO_2 }}
          token: ${{ secrets.REPO_TOKEN }}
      - name: Setup CI
        uses: ./sphinx/.github/actions/setup
        with:
          pull_token: ${{ secrets.REPO_TOKEN }}
          perf: false
      - name: Install deps
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential pkg-config libssl-dev libudev-dev cmake
          cd sphinx/cli
          cargo install --locked --force --path .
          cargo prove install-toolchain
          echo "RUSTFLAGS=${{env.RUSTFLAGS}} --cfg tokio_unstable" | tee -a $GITHUB_ENV
      - uses: ./ci-workflows/.github/actions/check-downstream-compiles
        with:
          upstream-path: "${{ env.UPSTREAM_REPO }}"
          downstream-path: "${{ env.DOWNSTREAM_REPO }}"
          more-paths: "${{ env.DOWNSTREAM_REPO_2 }}/aptos"
          patch-ssh: false
